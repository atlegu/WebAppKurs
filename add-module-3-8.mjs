import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://tqpryezzddufpovfbpld.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRxcHJ5ZXp6ZGR1ZnBvdmZicGxkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE0NjA5MDksImV4cCI6MjA2NzAzNjkwOX0.TYmpggmCUr_7aNN_KKC5igvyT_QOWjFpa4_wlX_hjpE';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Module 3.8 content - proper structure for sub-modules
const module38Content = {
  sections: [
    {
      title: "Seriel√•n vs. Annuitetsl√•n",
      type: "content",
      content: `**La oss utforske forskjellen mellom seriel√•n og annuitetsl√•n!**

Bruk den interaktive kalkulatoren nedenfor til √• sammenligne de to vanligste nedbetalingsformene for l√•n. Pr√∏v √• justere parametrene og se hvordan det p√•virker betalingene og totalkostnadene.

!component:loan-comparison

**Hva er forskjellen?**

I modul 3.5 l√¶rte du om annuitetsl√•n - l√•n med like store betalinger gjennom hele l√•neperioden. N√• skal vi sammenligne dette med seriel√•n og forst√• n√•r hver type passer best.

**Annuitetsl√•n - repetisjon fra modul 3.5**

Som du husker fra tidligere:
‚Ä¢ Like store betalinger hver m√•ned/√•r
‚Ä¢ Betalingen = L√•nebel√∏p / Annuitetsfaktor
‚Ä¢ Betalingen best√•r av b√•de renter og avdrag
‚Ä¢ Rentedelen synker mens avdragsdelen √∏ker over tid
‚Ä¢ Total betaling forblir konstant

**Seriel√•n - det nye konseptet**

Med seriel√•n er det avdragene som er like store:
‚Ä¢ Avdrag = L√•nebel√∏p / Antall terminer
‚Ä¢ Renter beregnes av gjenv√¶rende l√•n
‚Ä¢ Total betaling = Fast avdrag + Synkende renter
‚Ä¢ Betalingene blir mindre over tid

**Matematisk sammenligning**

La oss se p√• et eksempel med 1 million kr l√•n over 10 √•r til 5% rente:

**Annuitetsl√•n:**
‚Ä¢ M√•nedlig betaling: 10 607 kr (konstant)
‚Ä¢ Total betalt: 1 272 792 kr
‚Ä¢ Totale renter: 272 792 kr

**Seriel√•n:**
‚Ä¢ F√∏rste betaling: 12 500 kr (8 333 kr avdrag + 4 167 kr renter)
‚Ä¢ Siste betaling: 8 368 kr (8 333 kr avdrag + 35 kr renter)
‚Ä¢ Total betalt: 1 252 083 kr
‚Ä¢ Totale renter: 252 083 kr

**Hvorfor er seriel√•n "billigere"?**

Det er kritisk viktig √• forst√• at seriel√•n ikke har lavere rente eller er iboende billigere. Forskjellen i totale rentekostnader kommer utelukkende av at du betaler ned l√•net raskere:

1. Med seriel√•n betaler du mer i starten
2. Dette reduserer l√•nebalansen raskere
3. Lavere l√•nebalanse gir lavere renter
4. Totalt betaler du mindre renter

**Det samme prinsippet gjelder hvis du:**
‚Ä¢ Betaler ned halve l√•net med en gang
‚Ä¢ Gj√∏r ekstra innbetalinger p√• annuitetsl√•net
‚Ä¢ Velger kortere nedbetalingstid

**Fordeler og ulemper**

**Annuitetsl√•n:**
‚úì Forutsigbar √∏konomi - samme betaling hver m√•ned
‚úì Lettere √• budsjettere
‚úì Lavere belastning i starten
‚úì Passer hvis du forventer √∏kende inntekt

‚úó H√∏yere totale rentekostnader
‚úó Tregere nedbetaling i starten
‚úó Mer f√∏lsom for renteendringer tidlig

**Seriel√•n:**
‚úì Lavere totale rentekostnader
‚úì Raskere nedbetaling
‚úì Synkende belastning over tid
‚úì Passer hvis du har god √∏konomi n√•

‚úó H√∏yere betalinger i starten
‚úó Vanskeligere √• budsjettere (varierende betalinger)
‚úó Kan v√¶re t√∏ft de f√∏rste √•rene

**Hvem b√∏r velge hva?**

**Velg annuitetsl√•n hvis:**
‚Ä¢ Du er ung med forventning om karriereutvikling
‚Ä¢ Du har stram √∏konomi de f√∏rste √•rene
‚Ä¢ Du verdsetter forutsigbarhet h√∏yt
‚Ä¢ Du kj√∏per din f√∏rste bolig

**Velg seriel√•n hvis:**
‚Ä¢ Du har god √∏konomi n√•
‚Ä¢ Du n√¶rmer deg pensjon (vil ha lav gjeld som pensjonist)
‚Ä¢ Du √∏nsker √• minimere rentekostnader
‚Ä¢ Du har fleksibilitet i budsjettet

**Praktisk eksempel: Boligkj√∏p**

La oss si du skal l√•ne 3 millioner til boligkj√∏p:
‚Ä¢ Rente: 4,5%
‚Ä¢ Nedbetalingstid: 25 √•r

**Med annuitetsl√•n:**
‚Ä¢ M√•nedlig betaling: 16 695 kr
‚Ä¢ √Örlig betaling √•r 1: 200 340 kr
‚Ä¢ √Örlig betaling √•r 25: 200 340 kr

**Med seriel√•n:**
‚Ä¢ M√•nedlig betaling √•r 1: 21 250 kr
‚Ä¢ √Örlig betaling √•r 1: 255 000 kr
‚Ä¢ M√•nedlig betaling √•r 25: 10 188 kr
‚Ä¢ √Örlig betaling √•r 25: 122 250 kr

**Kombinasjonsstrategier**

Mange banker tilbyr ogs√•:

1. **Delvis seriel√•n**: F.eks. 50% serie og 50% annuitet
2. **Annuitetsl√•n med ekstra nedbetaling**: Fleksibilitet til √• betale ekstra
3. **Trappel√•n**: √òkende betalinger over tid

**Rentef√∏lsomhet**

Et viktig poeng er at seriel√•n er mindre f√∏lsomt for rente√∏kninger over tid:
‚Ä¢ Ved rente√∏kning p√•virkes kun gjenv√¶rende l√•n
‚Ä¢ Seriel√•n har lavere gjenv√¶rende l√•n enn annuitetsl√•n
‚Ä¢ Derfor blir rente√∏kningen mindre belastende

**Skatteeffekter**

I Norge gir gjeldsrenter skattefradrag (22% av rentene). Dette p√•virker:
‚Ä¢ Effektiv rente blir lavere
‚Ä¢ Fordelen med seriel√•n reduseres noe
‚Ä¢ Men hovedprinsippene forblir de samme

**Oppsummering**

‚Ä¢ Seriel√•n og annuitetsl√•n har samme rente
‚Ä¢ Forskjellen ligger i nedbetalingsprofilen
‚Ä¢ Seriel√•n gir lavere totale renter fordi du betaler raskere
‚Ä¢ Valget avhenger av din √∏konomiske situasjon og preferanser
‚Ä¢ Du kan alltid betale ekstra p√• annuitetsl√•n for samme effekt

**üéØ Det viktigste √• huske**

‚Ä¢ Annuitetsl√•n: Like betalinger, forutsigbart
‚Ä¢ Seriel√•n: Like avdrag, synkende betalinger
‚Ä¢ Ingen er "billigere" - forskjellen er n√•r du betaler
‚Ä¢ Vurder din egen √∏konomi n√• og fremover
‚Ä¢ Fleksibilitet kan v√¶re vel s√• viktig som totalkostnad

**Refleksjonssp√∏rsm√•l:** Mange unge velger annuitetsl√•n fordi de har lavere inntekt i starten av karrieren. Men hva skjer hvis renten stiger kraftig de f√∏rste √•rene? Hvilken l√•netype er mest s√•rbar for tidlige rente√∏kninger, og hvorfor?`
    }
  ]
};

async function addModule38() {
  try {
    // First find module 3 (Tidsverdien av penger)
    const { data: module3, error: moduleError } = await supabase
      .from('modules')
      .select('id')
      .eq('order_index', 3)
      .single();

    if (moduleError) {
      console.error('Error fetching module 3:', moduleError);
      return;
    }

    console.log('Found module 3 with id:', module3.id);

    // Check if sub-module 3.8 already exists
    const { data: existingSubModule, error: fetchError } = await supabase
      .from('sub_modules')
      .select('*')
      .eq('module_id', module3.id)
      .eq('order_index', 8)
      .single();

    if (fetchError && fetchError.code !== 'PGRST116') {
      console.error('Error fetching sub-module:', fetchError);
      return;
    }

    if (existingSubModule) {
      // Update existing sub-module
      const { error: updateError } = await supabase
        .from('sub_modules')
        .update({ 
          title: 'Seriel√•n vs. Annuitetsl√•n',
          content: module38Content,
          updated_at: new Date().toISOString()
        })
        .eq('id', existingSubModule.id);

      if (updateError) {
        console.error('Error updating sub-module 3.8:', updateError);
      } else {
        console.log('Successfully updated sub-module 3.8');
      }
    } else {
      // Create new sub-module
      const { error: insertError } = await supabase
        .from('sub_modules')
        .insert({
          module_id: module3.id,
          title: 'Seriel√•n vs. Annuitetsl√•n',
          content: module38Content,
          order_index: 8,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });

      if (insertError) {
        console.error('Error creating sub-module 3.8:', insertError);
      } else {
        console.log('Successfully created sub-module 3.8');
      }
    }
  } catch (error) {
    console.error('Unexpected error:', error);
  }
}

addModule38();