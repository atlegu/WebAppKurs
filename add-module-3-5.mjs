import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://tqpryezzddufpovfbpld.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRxcHJ5ZXp6ZGR1ZnBvdmZicGxkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE0NjA5MDksImV4cCI6MjA2NzAzNjkwOX0.TYmpggmCUr_7aNN_KKC5igvyT_QOWjFpa4_wlX_hjpE';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Module 3.5 content
const module35Content = {
  title: '3.5 Annuitet',
  sections: [
    {
      type: 'introduction',
      content: `**La oss f√∏rst utforske annuiteter gjennom interaksjon!**

Pr√∏v √• justere parametrene i visualiseringen nedenfor for √• se hvordan annuiteter fungerer. Legg spesielt merke til hvordan vi kan utlede annuitetsformelen fra to perpetuiteter.

!component:annuity`
    },
    {
      type: 'text',
      content: `**Hva er en annuitet?**

En annuitet er en serie med like betalinger som skjer med jevne mellomrom over en begrenset tidsperiode. Eksempler p√• annuiteter i hverdagen:

‚Ä¢ Bill√•n med faste m√•nedlige avdrag
‚Ä¢ Boligl√•n med fast rente og avdrag
‚Ä¢ Pensjonssparing med √•rlige innbetalinger
‚Ä¢ Livsforsikring med faste premier
‚Ä¢ Leieavtaler med like betalinger

Annuiteter er grunnleggende byggeklosser i finans fordi sv√¶rt mange finansielle produkter og avtaler inneb√¶rer like, periodiske betalinger.`
    },
    {
      type: 'text',
      content: `**Utledning av annuitetsformelen**

I stedet for √• summere alle betalingene (som kan bli tungvint med mange perioder), bruker vi et elegant triks:

**Steg 1: Se p√• en perpetuitet som starter i √•r 1**
N√•verdien av denne perpetuiteten er: PV‚ÇÅ = C/r

**Steg 2: Se p√• en perpetuitet som starter i √•r n+1**
Denne perpetuiteten har verdi C/r i √•r n, s√• n√•verdien i dag er:
PV‚ÇÇ = (C/r) / (1+r)‚Åø

**Steg 3: Annuiteten = Perpetuitet 1 - Perpetuitet 2**
En annuitet med n betalinger er akkurat forskjellen mellom disse to perpetuitetene!

PV(annuitet) = PV‚ÇÅ - PV‚ÇÇ = C/r - (C/r)/(1+r)‚Åø

Dette kan skrives om til:
**PV = C √ó [1/r - 1/(r(1+r)‚Åø)]**`
    },
    {
      type: 'text',
      content: `**Annuitetsfaktoren**

Uttrykket i klammeparentesen kalles annuitetsfaktoren (AF):

AF = 1/r - 1/(r(1+r)‚Åø)

Annuitetsfaktoren forteller oss hvor mange "√•rs betalinger" annuiteten er verdt, justert for tidsverdien av penger.

**Intuisjon:** 
‚Ä¢ Hvis r = 0 (ingen rente), blir AF = n (antall perioder)
‚Ä¢ Jo h√∏yere rente, desto lavere AF (fremtidige betalinger blir mindre verdt)
‚Ä¢ Jo flere perioder, desto n√¶rmere kommer AF til 1/r (perpetuitetsverdien)`
    },
    {
      type: 'text',
      content: `**Sluttverdi av annuitet**

Mens n√•verdien diskonterer alle betalinger til i dag, beregner sluttverdien hva alle betalingene vil v√¶re verdt p√• slutten av perioden:

**FV = C √ó [(1+r)‚Åø - 1]/r**

Dette er nyttig n√•r vi vil vite:
‚Ä¢ Hvor mye vi har spart opp ved pensjonsalder
‚Ä¢ Verdien av et investeringsprogram
‚Ä¢ Akkumulert formue fra regelmessig sparing`
    },
    {
      type: 'text',
      content: `**Praktiske anvendelser**

**1. Beregne l√•nebetalinger**
Hvis du l√•ner 500 000 kr til 4% rente over 20 √•r:
√Örlig betaling = 500 000 / AF(4%, 20 √•r)

**2. Pensjonssparing**
Hvis du sparer 50 000 kr √•rlig i 30 √•r med 7% avkastning:
Sluttverdi = 50 000 √ó [(1.07¬≥‚Å∞ - 1)/0.07]

**3. Verdsetting av leieinntekter**
Et utleielokale gir 100 000 kr/√•r i 10 √•r, diskonteringsrente 6%:
N√•verdi = 100 000 √ó AF(6%, 10 √•r)`
    },
    {
      type: 'text',
      content: `**Forskjellen mellom annuitet og perpetuitet**

| Egenskap | Annuitet | Perpetuitet |
|----------|----------|-------------|
| Varighet | Begrenset (n perioder) | Uendelig |
| Formel | PV = C √ó AF | PV = C/r |
| N√•r n‚Üí‚àû | AF ‚Üí 1/r | Konstant = 1/r |
| Eksempel | Bill√•n | Preferanseaksje |`
    },
    {
      type: 'text',
      content: `**Annuitet med vekst**

Hvis betalingene vokser med en fast rate g:
**PV = C √ó [1/(r-g) - 1/((r-g)(1+r)‚Åø)]**

Dette brukes n√•r:
‚Ä¢ Leieinntekter justeres for inflasjon
‚Ä¢ L√∏nn/pensjon √∏ker over tid
‚Ä¢ Driftskostnader vokser med en fast rate`
    },
    {
      type: 'text',
      content: `**üéØ Det viktigste √• huske**

‚Ä¢ En annuitet er like betalinger over begrenset tid
‚Ä¢ Kan utledes elegant fra to perpetuiteter
‚Ä¢ Annuitetsfaktoren AF = 1/r - 1/(r(1+r)‚Åø)
‚Ä¢ N√•verdi: PV = C √ó AF
‚Ä¢ Sluttverdi: FV = C √ó [(1+r)‚Åø - 1]/r
‚Ä¢ Brukes i l√•n, sparing, investeringer og verdsetting`
    },
    {
      type: 'reflection',
      content: `**Refleksjonssp√∏rsm√•l:** Hvorfor tror du banker foretrekker annuitetsl√•n fremfor seriel√•n? Tenk p√• hvordan betalingene fordeler seg over tid og hvilken part som b√¶rer renterisikoen.`
    }
  ]
};

async function updateModule35() {
  try {
    // First find module 3 (Tidsverdien av penger)
    const { data: module3, error: moduleError } = await supabase
      .from('modules')
      .select('id')
      .eq('order_index', 3)
      .single();

    if (moduleError) {
      console.error('Error fetching module 3:', moduleError);
      return;
    }

    console.log('Found module 3 with id:', module3.id);

    // Check if sub-module 3.5 already exists
    const { data: existingSubModule, error: fetchError } = await supabase
      .from('sub_modules')
      .select('*')
      .eq('module_id', module3.id)
      .eq('order_index', 5)
      .single();

    if (fetchError && fetchError.code !== 'PGRST116') {
      console.error('Error fetching sub-module:', fetchError);
      return;
    }

    const contentString = JSON.stringify(module35Content);

    if (existingSubModule) {
      // Update existing sub-module
      const { error: updateError } = await supabase
        .from('sub_modules')
        .update({ 
          title: 'Annuitet',
          content: contentString,
          updated_at: new Date().toISOString()
        })
        .eq('id', existingSubModule.id);

      if (updateError) {
        console.error('Error updating sub-module 3.5:', updateError);
      } else {
        console.log('Successfully updated sub-module 3.5');
      }
    } else {
      // Create new sub-module
      const { error: insertError } = await supabase
        .from('sub_modules')
        .insert({
          module_id: module3.id,
          title: 'Annuitet',
          content: contentString,
          order_index: 5,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });

      if (insertError) {
        console.error('Error creating sub-module 3.5:', insertError);
      } else {
        console.log('Successfully created sub-module 3.5');
      }
    }
  } catch (error) {
    console.error('Unexpected error:', error);
  }
}

updateModule35();